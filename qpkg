#!/bin/bash

# QPKG - QNX Package Manager
# Professional package management for QNX 8 ARM / BlackBerry 10

VERSION="1.0.0"
REPO_URL="https://github.com/sw7ft/qnx-packages"
MANIFEST_URL="https://raw.githubusercontent.com/sw7ft/qnx-packages/main/packages.json"
INSTALL_DIR="$HOME/.qnx-packages"
CACHE_DIR="/tmp/qpkg-cache"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Create directories
mkdir -p "$INSTALL_DIR" "$CACHE_DIR"

log() {
    echo -e "${BLUE}[qpkg]${NC} $1"
}

success() {
    echo -e "${GREEN}[qpkg]${NC} $1"
}

error() {
    echo -e "${RED}[qpkg]${NC} $1"
    exit 1
}

warn() {
    echo -e "${YELLOW}[qpkg]${NC} $1"
}

# Download package manifest
update_manifest() {
    log "Updating package manifest..."
    if command -v curl >/dev/null 2>&1; then
        curl -L -o "$CACHE_DIR/packages.json" "$MANIFEST_URL" 2>/dev/null
    elif command -v wget >/dev/null 2>&1; then
        wget -O "$CACHE_DIR/packages.json" "$MANIFEST_URL" 2>/dev/null
    else
        error "Neither curl nor wget found. Cannot download packages."
    fi
    
    if [ $? -eq 0 ]; then
        success "Package manifest updated"
    else
        error "Failed to download package manifest"
    fi
}

# List available packages
list_packages() {
    if [ ! -f "$CACHE_DIR/packages.json" ]; then
        update_manifest
    fi
    
    log "Available QNX packages:"
    echo
    
    # Parse JSON (basic implementation)
    grep -E '"[^"]+": {' "$CACHE_DIR/packages.json" | sed 's/.*"\([^"]*\)": {.*/\1/' | while read pkg; do
        if [ "$pkg" != "name" ] && [ "$pkg" != "version" ] && [ "$pkg" != "description" ] && [ "$pkg" != "repository" ] && [ "$pkg" != "api_base" ] && [ "$pkg" != "packages" ]; then
            desc=$(grep -A 5 "\"$pkg\":" "$CACHE_DIR/packages.json" | grep '"description"' | sed 's/.*"description": "\([^"]*\)".*/\1/')
            size=$(grep -A 5 "\"$pkg\":" "$CACHE_DIR/packages.json" | grep '"size"' | sed 's/.*"size": "\([^"]*\)".*/\1/')
            printf "  ${GREEN}%-12s${NC} - %s (${YELLOW}%s${NC})\n" "$pkg" "$desc" "$size"
        fi
    done
    echo
}

# Install a package
install_package() {
    local pkg_name="$1"
    
    if [ -z "$pkg_name" ]; then
        error "Package name required. Usage: qpkg install <package>"
    fi
    
    if [ ! -f "$CACHE_DIR/packages.json" ]; then
        update_manifest
    fi
    
    # Check if package exists
    if ! grep -q "\"$pkg_name\":" "$CACHE_DIR/packages.json"; then
        error "Package '$pkg_name' not found. Run 'qpkg list' to see available packages."
    fi
    
    # Extract package info
    download_url=$(grep -A 10 "\"$pkg_name\":" "$CACHE_DIR/packages.json" | grep '"download_url"' | sed 's/.*"download_url": "\([^"]*\)".*/\1/')
    size=$(grep -A 10 "\"$pkg_name\":" "$CACHE_DIR/packages.json" | grep '"size"' | sed 's/.*"size": "\([^"]*\)".*/\1/')
    
    log "Installing $pkg_name ($size)..."
    log "Downloading from: $download_url"
    
    # Download package
    pkg_file="$CACHE_DIR/${pkg_name}.tar.gz"
    if command -v curl >/dev/null 2>&1; then
        curl -L -o "$pkg_file" "$download_url"
    else
        wget -O "$pkg_file" "$download_url"
    fi
    
    if [ $? -ne 0 ]; then
        error "Failed to download $pkg_name"
    fi
    
    # Extract package
    pkg_dir="$INSTALL_DIR/$pkg_name"
    mkdir -p "$pkg_dir"
    
    log "Extracting $pkg_name to $pkg_dir..."
    
    # Determine archive type and extract
    if [[ "$pkg_file" == *.tar.gz ]] || [[ "$download_url" == *.tar.gz ]]; then
        tar -xzf "$pkg_file" -C "$pkg_dir" 2>/dev/null
    elif [[ "$pkg_file" == *.tar ]] || [[ "$download_url" == *.tar ]]; then
        tar -xf "$pkg_file" -C "$pkg_dir" 2>/dev/null
    elif [[ "$pkg_file" == *.zip ]] || [[ "$download_url" == *.zip ]]; then
        if command -v unzip >/dev/null 2>&1; then
            unzip -q "$pkg_file" -d "$pkg_dir"
        else
            error "unzip not found, cannot extract ZIP archives"
        fi
    fi
    
    if [ $? -eq 0 ]; then
        # Run installation script if it exists
        if [ -f "$pkg_dir/install.sh" ]; then
            log "Running installation script..."
            chmod +x "$pkg_dir/install.sh"
            cd "$pkg_dir" && ./install.sh
        fi
        
        success "$pkg_name installed successfully to $pkg_dir"
        
        # Add to PATH if it has binaries
        if [ -d "$pkg_dir/bin" ]; then
            warn "Add $pkg_dir/bin to your PATH to use $pkg_name"
        fi
    else
        error "Failed to extract $pkg_name"
    fi
    
    # Cleanup
    rm -f "$pkg_file"
}

# Remove a package
remove_package() {
    local pkg_name="$1"
    
    if [ -z "$pkg_name" ]; then
        error "Package name required. Usage: qpkg remove <package>"
    fi
    
    pkg_dir="$INSTALL_DIR/$pkg_name"
    
    if [ ! -d "$pkg_dir" ]; then
        error "Package '$pkg_name' is not installed"
    fi
    
    log "Removing $pkg_name..."
    rm -rf "$pkg_dir"
    success "$pkg_name removed successfully"
}

# Show help
show_help() {
    echo "QPKG - QNX Package Manager v$VERSION"
    echo "Professional package management for QNX 8 ARM / BlackBerry 10"
    echo
    echo "Usage: qpkg <command> [options]"
    echo
    echo "Commands:"
    echo "  list                    List available packages"
    echo "  install <package>       Install a package"
    echo "  remove <package>        Remove an installed package"
    echo "  update                  Update package manifest"
    echo "  help                    Show this help message"
    echo
    echo "Examples:"
    echo "  qpkg list               # Show all available packages"
    echo "  qpkg install quickjs    # Install QuickJS JavaScript engine"
    echo "  qpkg install mysql      # Install MySQL database server"
    echo "  qpkg remove nano        # Remove nano text editor"
    echo
    echo "Repository: $REPO_URL"
}

# Main command dispatcher
case "$1" in
    "list"|"ls")
        list_packages
        ;;
    "install"|"add")
        install_package "$2"
        ;;
    "remove"|"rm"|"uninstall")
        remove_package "$2"
        ;;
    "update"|"refresh")
        update_manifest
        ;;
    "help"|"--help"|"-h"|"")
        show_help
        ;;
    *)
        error "Unknown command: $1. Run 'qpkg help' for usage information."
        ;;
esac 